name: Build docker image
on:
  workflow_call:
    inputs:
      commit-hash:
        required: false
        type: string
        default: ""
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
env:
  DOCKERHUB_REPO: tgpy/tgpy
jobs:
  Build-docker-image:
    name: Build docker image
    concurrency: release-docker
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.commit-hash }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Setup Buildx caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set release flag
        if: github.ref == 'refs/heads/master'
        run: sed -i "s/\(IS_DEV_BUILD *= *\).*/\1False/" tgpy/version.py
      - name: Set branch tag
        if: github.ref != 'refs/heads/master'
        run: |
          BRANCH_TAG=$DOCKERHUB_REPO:$(git rev-parse --abbrev-ref HEAD)
          echo "IMAGE_TAGS=-t $BRANCH_TAG" >> $GITHUB_ENV
      - name: Set latest tag
        if: github.ref == 'refs/heads/master'
        run: |
          BRANCH_TAG=$DOCKERHUB_REPO:latest
          VERSION_TAG=$DOCKERHUB_REPO:v$(cat tgpy/version.py| grep __version__ | sed "s/^__version__ = '\(.*\)'$/\1/")
          echo "IMAGE_TAGS=-t $BRANCH_TAG -t $VERSION_TAG" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $DOCKERHUB_REPO:$(git rev-parse --short HEAD) \
            $IMAGE_TAGS \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache-new,mode=max" \
            --push .
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
